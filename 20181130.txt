1.运行rails new生成一个新程序
bogon:~ Hsuyl$ mkdir rails_projects
bogon:~ Hsuyl$ cd rails_projects
bogon:rails_projects Hsuyl$ rails new first_app

2。打开gemfile文件
bogon:rails_projects Hsuyl$ cd first_app/
bogon:first_app Hsuyl$ subl gemfile

3.更新bundle
$ bundle update
$ bundle install

4.在开发电脑上运行一个本地服务器：
$ rails server
系统提示缺少js时，下载一个node.js就好了
反应
	=> Booting Puma
	=> Rails 5.1.6 application starting in development 
	=> Run `rails server -h` for more startup options
	Puma starting in single mode...
	* Version 3.12.0 (ruby 2.2.6-p396), codename: Llamas in 	Pajamas
	* Min threads: 5, max threads: 5
	* Environment: development
	* Listening on tcp://0.0.0.0:3000
	Use Ctrl-C to stop
上述代码告诉我们这个程序在0.0.0.0地址的3000端口运行，这个地址告诉系统监听这台电脑上的每一个可用的IP地址，可以通过127.0.0.1或者localhost查看程序

5.打开git初始化一个新仓库
git init
在应用程序的根目录创建一个名为.gitignore的文件，然后写入一些规则告诉git要忽略哪一些文件
修改
# Ignore all logfiles and tempfiles.
/log/*.log
/tmp

# Ignore other unneeded files.
doc/
*.swp
*~
.project
.DS_Store
.idea
下一步git add .
git commit
退出git log用q
然后git remote
git push添加到GitHub上
—————————————————————————————————————————————————————————
tips：如何找到隐藏的gitignore文件
 1）打开git项目文件夹
 2）打开terminal
 3）输入defaults write com.apple.finder AppleShowAllFiles -bool true
 4）按下option+command+esc 重新开启 finder
—————————————————————————————————————————————————————————

6.如果不小心删除了app/controllers/文件夹：
	$ ls app/controllers/
	application_controller.rb
	$ rm -rf app/controllers/
	$ ls app/controllers/
	ls: app/controllers/: No such file or directory    
用git status查看改动只发生在工作区，还没有提交，可以用checkout撤销
	$ git checkout -f
	$ git status
	# On branch master
	nothing to commit (working directory clean) 
	$ ls app/	controllers/ application_controller.rb 

7.分支
用checkout，指定-b旗标创建一个新分支：
	$ git checkout -b modify-README
	Switched to a new branch 'modify-README'
	$ git branch
	master
	* modify-README
第一个命令会创建一个新的分支，然后切换到这个分支，第二个命令会将本地所有的分支列出来

8.编辑
mv-移动 move 修改文件名
	$ git mv README.rdoc README.md
	$ subl README.md
修改readme.md的文件
	# Ruby on Rails Tutorial: first application
	This is the first application for the
	[*Ruby on Rails Tutorial*](http://railstutorial.org/)
	by [Michael Hartl](http://michaelhartl.com/).
然后git commit -a -m "Improve the README file"

9.合并到主分支
	$ git checkout master
	$ git merge modify-README
清理分支用git branch -d 删除这个从分支
	$ git branch -d modify-README
使用 git branch -D  放弃对从分支所做的修改
	$ git checkout -b topic-branch
	$ <really screw up the branch>
	$ git add .
	$ git commit -a -m "Major screw up"
	$ git checkout master
	$ git branch -D topic-branch   


——————————————————————————————————————————————————————
rail s -p 3009
自定义本地网站运行的端口

CRUD 增删改查
C create
R read 
U update 
D delete 

MVC 
m model 与数据库打交道
v view  展示层（html,css,js)
c controller 控制层 控制器 处理业务逻辑

________________________________________________________
1.在 Application 控制器中添加 hello 动作
app/controllers/application_controller.rb
class ApplicationController < ActionController::Base
  protect_from_forgery with: :exception

  def hello
    render html: "hello, world!"
  end
end

2.设置根路由
config/routes.rb
Rails.application.routes.draw do
  root 'application#hello'
end

3.users 资源
把 scaffold 传给 rails generate 命令就可以使用 Rails 的脚手架了。传给 scaffold 的参数是资源名的单数形式（这里是 User）后面可以再跟着一些可选参数，指定数据模型中的字段：
	$ rails generate scaffold User name:string email:string

4.用 rails db:migrate 命令迁移（migrate）数据库
	$ rails db:migrate

运行本地 Web 服务器：
	$ rails server


mvc
浏览器向 /users 发送请求；

Rails 的路由把 /users 交给 Users 控制器的 index 动作处理；

index 动作要求 User 模型检索所有用户（User.all）；

User 模型从数据库中读取所有用户；

User 模型把所有用户组成的列表返回给控制器；

控制器把所有用户赋值给 @users 变量，然后传入 index 视图；

视图使用嵌入式 Ruby 把页面渲染成 HTML；

控制器把 HTML 送回浏览器。









































