9.11 user.rb
在 User 模型中添加 forget 方法
# 如果指定的令牌和摘要匹配，返回 true
  def authenticated?(remember_token)
    BCrypt::Password.new(remember_digest).is_password?(remember_token)
  end

# 忘记用户
  def forget
    update_attribute(:remember_digest, nil)
  end
 忘记持久对话，在log_out 辅助方法中调用 forget
 forget 方法先调用 user.forget，然后再从 cookie 中删除 user_id 和 remember_token。
 9.12app/helpers/sessions_helper.rb
 # 忘记持久会话
  def forget(user)
    user.forget
    cookies.delete(:user_id)
    cookies.delete(:remember_token)
  end

  # 退出当前用户
  def log_out
    forget(current_user)
    session.delete(:user_id)
    @current_user = nil
  end

  rails test

测试用户退出
9.14test/integration/users_login_test.rb
# 模拟用户在另一个窗口中点击退出链接
    delete logout_path

9.16只有登录后才能退出
app/controllers/sessions_controller.rb
	def destroy
    log_out if logged_in?
    redirect_to root_url
  end
9.17测试没有摘要时authenticated？方法的行为
user_test.rb
	test "authenticated? should return false for a user with nil digest" do
    assert_not @user.authenticated?('')
  end

9.18更新 authenticated? 方法，处理没有记忆摘要的情况
app/models/user.rb
# 如果指定的令牌和摘要匹配，返回 true
  def authenticated?(remember_token)
    return false if remember_digest.nil?
    BCrypt::Password.new(remember_digest).is_password?(remember_token)
  end

  # 忘记用户
  def forget
    update_attribute(:remember_digest, nil)
  end

9.21在登录表单中添加“记住我”复选框
sessions/new.html.erb
	<%= f.label :remember_me, class: "checkbox inline" do %>
      <%= f.check_box :remember_me %>
      <span>Remember me on this computer</span>
	<% end %>


9.22“记住我”复选框的css规则
/* forms */
.
.
.
.checkbox {
  margin-top: -10px;
  margin-bottom: 10px;
  span {
    margin-left: 20px;
    font-weight: normal;
  }
}

#session_remember_me {
  width: auto;
  margin-left: 0;
}

9.23 处理提交记住我复选框
sessions_controller.rb
def create	
	if 
		params[:session][:remember_me] == '1' ? remember(user) : forget(user)
	else
	end
end

--------------------------------------------------------------------------
三元运算符
三部分 boolean? ? do_one_thing : do_something_else
还可以用来替代赋值操作，所以
if boolean?
  var = foo
else
  var = bar
end
还可以写成var = boolean? ? foo : bar





























