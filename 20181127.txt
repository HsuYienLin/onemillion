1.创建版本库
首先，选择一个合适的地方，创建一个空目录：
 	$ mkdir learngit
 	$ cd learngit
	$ pwd
	/Users/michael/learngit
（pwd命令用于显示当前目录，这个仓库位于/Users/michael/learngit）

2.第二步，通过git init命令把这个目录变成Git可以管理的仓库：
	$ git init
	Initialized empty Git repository in /Users/michael/learngit/.git/
（空的仓库建好了
当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件
如果没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见）

3.编写一个readme.txt文件
	Git is a version control system.
	Git is free software.
	一定要放到learngit目录下（子目录也行）
	把一个文件放到Git仓库只需要两步
		第一步，用命令git add告诉Git，把文件添加到仓库（执行上面的命令，没有任何显示）：
			$ git add readme.txt
		第二步，用命令git commit告诉Git，把文件提交到仓库：
			$ git commit -m "wrote a readme file"
			[master (root-commit) eaadf4e] wrote a readme file
			1 file changed, 2 insertions(+)
 			create mode 100644 readme.txt
 			（-m后面输入的是本次提交的说明，可以输入任意内容）
 		commit可以一次提交很多文件，所以可以多次add不同的文件，比如：
			$ git add file1.txt
			$ git add file2.txt file3.txt
			$ git commit -m "add 3 files."

4.已经成功地添加并提交了一个readme.txt文件，现在，是时候继续工作了，于是，我们继续修改readme.txt文件，改成如下内容：
	Git is a distributed version control system.
	Git is free software.

5.git status命令看看结果
	$ git status
	On branch master
	Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   readme.txt

	no changes added to commit (use "git add" and/or "git commit -a")

6.已经记不清上次怎么修改的readme.txt，需要用git diff这个命令看看
	$ git diff readme.txt 
	diff --git a/readme.txt b/readme.txt
	index 46d49bf..9247db6 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1,2 +1,2 @@
	-Git is a version control system.
	+Git is a distributed version control system.
 	Git is free software.

7.提交修改和提交新文件是一样的两步
	第一步是git add
		$ git add readme.txt
	运行git status看看当前仓库的状态：
		$ git status
		On branch master
		Changes to be committed:
  		(use "git reset HEAD <file>..." to unstage)
					modified:   readme.txt
	将要被提交的修改包括readme.txt，下一步，提交：
		$ git commit -m "add distributed"
		[master e475afc] add distributed
 		1 file changed, 1 insertion(+), 1 deletion(-)
 	再用git status命令看看仓库的当前状态：
 		$ git status
		On branch master
		nothing to commit, working tree clean

8.用git log命令查看历史纪录：
	$ git log 可以加上某些参数

9.把readme.txt回退到上一个版本
	首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	使用git reset命令：
		$ git reset --hard HEAD^
		HEAD is now at e475afc add distributed
	只要上面的命令行窗口还没有被关掉，就可以顺着往上找，找到上一级的commit id，就可以指定回到未来的某个版本：
		$ git reset --hard 1094a
		HEAD is now at 83b0afe append GPL

10.Git提供了一个命令git reflog用来记录你的每一次命令：
	$ git reflog
	e475afc HEAD@{1}: reset: moving to HEAD^
	1094adb (HEAD -> master) HEAD@{2}: commit: append GPL
	e475afc HEAD@{3}: commit: add distributed
	eaadf4e HEAD@{4}: commit (initial): wrote a readme file

11.工作区（Working Directory）：电脑上能看到的目录
版本库（Repository）
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。
	$ git commit -m "understand how stage works"
	[master e43a48b] understand how stage works
 	2 files changed, 2 insertions(+)
 	create mode 100644 LICENSE
 	未对工作区进行修改
 	$ git status
	On branch master
	nothing to commit, working tree clean

12.管理修改
提交第二次修改，可以继续git add再git commit，也可以别着急提交第一次修改，先git add第二次修改，再git commit，就相当于把两次修改合并后一块提交了：
第一次修改 -> git add -> 第二次修改 -> git add -> git commit

12.撤销修改
git checkout -- file可以丢弃工作区的修改：
	$ git checkout -- readme.txt
	上面的命令把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
		一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
		一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	命令中的“--”很重要，没有“--”，就变成了“切换到另一个分支”的命令
用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：
	$ git reset HEAD readme.txt
	Unstaged changes after reset:
	M    readme.txt

13.删除文件
添加一个新文件test.txt到Git并且提交：
	$ git add test.txt
	$ git commit -m "add test.txt"
一般情况下，通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：
	$ rm test.txt
这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：
	$ git status
	现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
		$ git rm test.txt
	另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
		$ git checkout -- test.txt	






































