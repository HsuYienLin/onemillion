罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。

字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。

示例 1:

输入: "III"
输出: 3
示例 2:

输入: "IV"
输出: 4
示例 3:

输入: "IX"
输出: 9
示例 4:

输入: "LVIII"
输出: 58
解释: L = 50, V= 5, III = 3.
示例 5:

输入: "MCMXCIV"
输出: 1994
解释: M = 1000, CM = 900, XC = 90, IV = 4.

解答
def roman_to_int(s)
    sum = 0
    last_char = nil
    s.reverse.each_char do |c|
        sum += 
            case c
            when 'I' then (last_char == 'V' || last_char == 'X' ) ? -1 : 1
            when 'V' then 5
            when 'X' then (last_char == 'L' || last_char == 'C' ) ? -10 : 10 
            when 'L' then 50
            when 'C' then (last_char == 'D' || last_char == 'M' ) ? -100 : 100 
            when 'D' then 500
            when 'M' then 1000
            end
        last_char = c
    end
                
    sum
end

-----------------------------------------------------------------------------


登入用户的方法在不同类型的测试中有所不同，在控制器测试中可以直接使用 session 方法，把 user.id 赋值给 :user_id 键：

def log_in_as(user)
  session[:user_id] = user.id
end

9.24添加log_in_as
test_helper.rb
# 登入指定的用户
  def log_in_as(user)
    session[:user_id] = user.id
  end
end

class ActionDispatch::IntegrationTest

  # 登入指定的用户
  def log_in_as(user, password: 'password', remember_me: '1')
    post login_path, params: { session: { email: user.email,
                                          password: password,
                                          remember_me: remember_me } }
  end
end

9.25测试“记住我”
test/integration/users_login_test.rb
 test "login with remembering" do
    log_in_as(@user, remember_me: '1')
    assert_not_empty cookies['remember_token']
  end

  test "login without remembering" do
    # 登录，设定 cookie
    log_in_as(@user, remember_me: '1')
    delete logout_path
    # 再次登录，确认 cookie 被删除了
    log_in_as(@user, remember_me: '0')
    assert_empty cookies['remember_token']
  end

9.27在 create 动作中使用实例变量的模板
app/controllers/sessions_controller.rb
def create
    ?user = User.find_by(email: params[:session][:email].downcase)
    if ?user && ?user.authenticate(params[:session][:password])
      log_in ?user
      params[:session][:remember_me] == '1' ? remember(?user) : forget(?user)
      redirect_to ?user
    else
      flash.now[:danger] = 'Invalid email/password combination'
      render 'new'
    end
end

9.28改进users_login_test.rb
assert_not_empty cookies['remember_token']
改为assert_equal FILL_IN, assigns(:user).FILL_IN

9.29在未测试的分支中抛出异常
sessions_helper.rb
def current_user
    if (user_id = session[:user_id])
      @current_user ||= User.find_by(id: user_id)
    elsif (user_id = cookies.signed[:user_id])
      raise       # 测试仍能通过，所以没有覆盖这个分支
      user = User.find_by(id: user_id)
      if user && user.authenticated?(cookies[:remember_token])
        log_in user
        @current_user = user
      end
    end
  end

 建立一个测试文件test/helpers/sessions_helper_test.rb
 步骤：
1.使用固件定义一个 user 变量；
2.调用 remember 方法记住这个用户；
3.确认 current_user 就是这个用户。

require 'test_helper'

class SessionsHelperTest < ActionView::TestCase

  def setup
    @user = users(:michael)
    remember(@user)
  end

  test "current_user returns right user when session is nil" do
    assert_equal @user, current_user
    assert is_logged_in?
  end

  test "current_user returns nil when remember digest is wrong" do
    @user.update_attribute(:remember_digest, User.digest(User.new_token))
    assert_nil current_user
  end
end

9.33删除抛出异常的代码
app/helpers/sessions_helper.rb
elsif (user_id = cookies.signed[:user_id])

---------------------------------------------------------------------
完成一道算法题 完成第九章的学习 
开始复习前面的知识 今天复习1-2章 

























